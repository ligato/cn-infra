// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package cninfra

import (
	"context"
	"github.com/google/wire"
	"go.ligato.io/cn-infra/v2/config"
	"go.ligato.io/cn-infra/v2/health/statuscheck"
	"go.ligato.io/cn-infra/v2/rpc/grpc"
	"go.ligato.io/cn-infra/v2/rpc/rest"
	"go.ligato.io/cn-infra/v2/servicelabel"
)

// Injectors from wire.go:

func InjectDefaultBase(ctx context.Context, conf config.Config) (Base, func(), error) {
	plugin := servicelabel.Provider()
	deps := statuscheck.NoPublishingDepsProvider()
	statuscheckConfig := statuscheck.ConfigProvider(conf)
	statuscheckPlugin := statuscheck.Provider(deps, statuscheckConfig)
	base := Base{
		ServiceLabel: plugin,
		StatusCheck:  statuscheckPlugin,
	}
	return base, func() {
	}, nil
}

func InjectDefaultServer(ctx context.Context, conf config.Config) (Server, func(), error) {
	basicHTTPAuthenticator := _wireBasicHTTPAuthenticatorValue
	deps := rest.Deps{
		Authenticator: basicHTTPAuthenticator,
	}
	restConfig := rest.ConfigProvider(conf)
	plugin, cleanup, err := rest.Provider(deps, restConfig)
	if err != nil {
		return Server{}, nil, err
	}
	grpcDeps := grpc.Deps{
		HTTP: plugin,
	}
	grpcConfig := grpc.ConfigProvider(conf)
	grpcPlugin, cleanup2, err := grpc.Provider(grpcDeps, grpcConfig)
	if err != nil {
		cleanup()
		return Server{}, nil, err
	}
	server := Server{
		HTTP: plugin,
		GRPC: grpcPlugin,
	}
	return server, func() {
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireBasicHTTPAuthenticatorValue = (rest.BasicHTTPAuthenticator)(nil)
)

// wire.go:

var WireDefaultAll = wire.NewSet(
	InjectDefaultBase,
	InjectDefaultServer,
)
