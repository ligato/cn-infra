// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package msg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataMsgServiceClient is the client API for DataMsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataMsgServiceClient interface {
	DataChanges(ctx context.Context, opts ...grpc.CallOption) (DataMsgService_DataChangesClient, error)
	DataResyncs(ctx context.Context, in *DataResyncRequests, opts ...grpc.CallOption) (*DataResyncReplies, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
}

type dataMsgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataMsgServiceClient(cc grpc.ClientConnInterface) DataMsgServiceClient {
	return &dataMsgServiceClient{cc}
}

func (c *dataMsgServiceClient) DataChanges(ctx context.Context, opts ...grpc.CallOption) (DataMsgService_DataChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataMsgService_serviceDesc.Streams[0], "/msg.DataMsgService/dataChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataMsgServiceDataChangesClient{stream}
	return x, nil
}

type DataMsgService_DataChangesClient interface {
	Send(*DataChangeRequest) error
	Recv() (*DataChangeReply, error)
	grpc.ClientStream
}

type dataMsgServiceDataChangesClient struct {
	grpc.ClientStream
}

func (x *dataMsgServiceDataChangesClient) Send(m *DataChangeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataMsgServiceDataChangesClient) Recv() (*DataChangeReply, error) {
	m := new(DataChangeReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataMsgServiceClient) DataResyncs(ctx context.Context, in *DataResyncRequests, opts ...grpc.CallOption) (*DataResyncReplies, error) {
	out := new(DataResyncReplies)
	err := c.cc.Invoke(ctx, "/msg.DataMsgService/dataResyncs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataMsgServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/msg.DataMsgService/ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataMsgServiceServer is the server API for DataMsgService service.
// All implementations must embed UnimplementedDataMsgServiceServer
// for forward compatibility
type DataMsgServiceServer interface {
	DataChanges(DataMsgService_DataChangesServer) error
	DataResyncs(context.Context, *DataResyncRequests) (*DataResyncReplies, error)
	Ping(context.Context, *PingRequest) (*PingReply, error)
	mustEmbedUnimplementedDataMsgServiceServer()
}

// UnimplementedDataMsgServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataMsgServiceServer struct {
}

func (*UnimplementedDataMsgServiceServer) DataChanges(DataMsgService_DataChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method DataChanges not implemented")
}
func (*UnimplementedDataMsgServiceServer) DataResyncs(context.Context, *DataResyncRequests) (*DataResyncReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataResyncs not implemented")
}
func (*UnimplementedDataMsgServiceServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedDataMsgServiceServer) mustEmbedUnimplementedDataMsgServiceServer() {}

func RegisterDataMsgServiceServer(s *grpc.Server, srv DataMsgServiceServer) {
	s.RegisterService(&_DataMsgService_serviceDesc, srv)
}

func _DataMsgService_DataChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataMsgServiceServer).DataChanges(&dataMsgServiceDataChangesServer{stream})
}

type DataMsgService_DataChangesServer interface {
	Send(*DataChangeReply) error
	Recv() (*DataChangeRequest, error)
	grpc.ServerStream
}

type dataMsgServiceDataChangesServer struct {
	grpc.ServerStream
}

func (x *dataMsgServiceDataChangesServer) Send(m *DataChangeReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataMsgServiceDataChangesServer) Recv() (*DataChangeRequest, error) {
	m := new(DataChangeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataMsgService_DataResyncs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataResyncRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataMsgServiceServer).DataResyncs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.DataMsgService/DataResyncs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataMsgServiceServer).DataResyncs(ctx, req.(*DataResyncRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataMsgService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataMsgServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.DataMsgService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataMsgServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataMsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msg.DataMsgService",
	HandlerType: (*DataMsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "dataResyncs",
			Handler:    _DataMsgService_DataResyncs_Handler,
		},
		{
			MethodName: "ping",
			Handler:    _DataMsgService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "dataChanges",
			Handler:       _DataMsgService_DataChanges_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "datamsg.proto",
}
